Evaluation function f(n) = h(n)
h(n): heuristic function
h(n): estimated cost of the cheapest path from node n to goal node.
If n is goal then h(n)=0
Greedy best-first search expands the node that appears to be closest to goal
Example: hSLD(n) = straight-line distance from n to Bucharest
General approach of informed search:
Best-first search: node is selected for expansion based on an evaluation function f(n)
Evaluation function: estimate of desirability
Usually is an estimated cost or distance 
Choose node which appears best
Implementation:
fringe is queue sorted in decreasing order of desirability.
Special cases: greedy search, A* search
function TREE-SEARCH(problem,fringe) return a solution or failurefringe  INSERT(
MAKE-NODE(INITIAL-STATE[problem]), fringe)loop doif EMPTY?(fringe) then return failurenode  REMOVE-FIRST(fringe)
if GOAL-TEST[problem] applied to STATE[node] succeedsthen return SOLUTION(node)
fringe  INSERT-ALL(EXPAND(node, problem), fringe)
Recall that the ordering of fringe defines the search strategy
Best-known form of best-first search.
Idea: avoid expanding paths that are already expensive.
Evaluation function f(n)=g(n) + h(n)
g(n) the cost (so far) to reach the node.
h(n) estimated cost to get from the node to the goal.
f(n) estimated total cost of path through n to goal. 
A heuristic h(n) is admissible if for every node n,    h(n) ≤ h*(n), where h*(n) is the true cost to reach the goal state from n.
An admissible heuristic never overestimates the cost to reach the goal, i.e., it is optimistic
Example: hSLD(n) (never overestimates the actual road distance)
Theorem: If h(n) is admissible, A* using TREE-SEARCH is optimal hey there i fucking hate working with files
